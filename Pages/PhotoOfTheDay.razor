@page "/pictureoftheday"
@using Wikkit.Data;
@using Wikkit.Services;
@inject WikipediaDataService dataService;
@inject SettingsService settings;

<PageTitleSetter PageTitle="Picture of the Day" />

<PullToReload OnReload="@Reload" />

@if (articles == null || articles.Count == 0)
{
    <div class="p-def">Loading...</div>
}
else
{
    <InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="(e) => LoadMore()">

        @foreach (var article in articles)
        {
            <ArticleCard ArticleData=article LargeImage=true />
        }

        <span id="observerTarget">
            <ArticleCard Title="Loading..." IsInfo=true />
        </span>

    </InfiniteScroll>

}

@code {
    List<ArticlePageData> articles = new();

    private int daysOffset = 0;

    private const int daysToGet = 5;

    protected override async Task OnInitializedAsync()
    {
        await GetArticles();
    }

    private async Task GetArticles()
    {
        if (settings.GetSettings().RandomizePictures)
        {
            var newArticles = await dataService.GetPicturesOfTheDayRand(daysToGet);
            articles.AddRange(newArticles);
        } else
        {
            DateTime dateStartDate = DateTime.Now.AddDays(-daysOffset);

            DateTime endDate = DateTime.Now.AddDays(-daysOffset - daysToGet);

            var newArticles = await dataService.GetPhotosOfTheDay(dateStartDate, endDate);

            articles.AddRange(newArticles);

            daysOffset += daysToGet;
        }
        
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadMore()
    {
        await GetArticles();
    }

    private async Task Reload()
    {
        articles.Clear();

        daysOffset = 0;

        await GetArticles();
    }

}
