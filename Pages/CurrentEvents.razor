@page "/currentevents"
@using Wikkit.Data;
@inject WikipediaDataService dataService;

<PageTitleSetter PageTitle="Current Events" />

<PullToReload OnReload="@Reload" />

@if (articles == null || articles.Count == 0)
{
    <div class="p-def">Loading...</div>
}
else
{
    <InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="(e) => GetArticles()">

        @foreach (var article in articles)
        {
            <ArticleCard ArticleData=article />
        }

        <span id="observerTarget">
            <ArticleCard Title="Loading..." IsInfo=true />
        </span>

    </InfiniteScroll>

}

@code {
    List<ArticlePageData> articles = new();

    int daysOffset = 0;

    string cont = "";

    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        daysOffset = 0;
        cont = "";

        await GetArticles();
    }

    private async Task GetArticles()
    {

        if (isLoading) return;
        isLoading = true;

        DateTime date = DateTime.Now.AddDays(-daysOffset);

        List<ArticlePageData> newArticles = new();
        int safety = 0;

        while (newArticles.Count < 10 && safety < 50)
        {            
            if (cont == "")            
            {                
                ArticlePageData dateHeaderArticle 
                    = await dataService.GetArticleInfo($"Portal:Current_events/{date.ToString("yyyy_MMMM_d")}");
                dateHeaderArticle.title = date.ToString("yyyy MMMM d");
                newArticles.Add(dateHeaderArticle);
            }

            (List<ArticlePageData> gotArticles, cont) = await dataService.GetCurrentEvents(date, cont);

            newArticles.AddRange(gotArticles);

            if (cont == "")
            {
                date = date.AddDays(-1);
                daysOffset++;
            }            

            safety++;
        }  

        articles.AddRange(newArticles);

        if (cont == "") daysOffset++;

        isLoading = false;

    }

    private async Task Reload()
    {
        daysOffset = 0;
        cont = "";

        articles.Clear();

        await GetArticles();
    }

}
