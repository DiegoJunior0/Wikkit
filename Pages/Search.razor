@page "/search"
@using Wikkit.Data;
@inject WikipediaDataService dataService;
@inject IJSRuntime JSRuntime

<PageTitleSetter PageTitle="Search" />

<div class="search-bar p-def bg-sec">
    <EditForm Model="@searchModel" OnValidSubmit="@SearchSubmit">
        <InputText @ref=searchInput class="bg-sec font-col b-rad-def" @bind-Value="@searchModel.SearchText" placeholder="Search..." />
    </EditForm>    
</div>

@if (searchSubmitted)
{
    <div class="p-def">Loading...</div>
}

@if (articles != null && articles.Count > 0)
{
    <InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="(e) => ContinueArticles(searchModel.SearchText, currentOffset)">

        @foreach (var article in articles)
        {
            <ArticleCard ArticleData=article />
        }

        <span id="observerTarget" style="@(currentOffset == 0 ? "display:none": "display: inherit;") ">
            <ArticleCard Title="Loading..." />
        </span>        

    </InfiniteScroll>

}

@code {
    List<ArticlePageData> articles = new();

    private SearchModel searchModel = new();

    private bool searchSubmitted = false;

    private int currentOffset;

    private InputText searchInput { get; set; }

    private class SearchModel
    {
        public string SearchText;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            searchInput.Element.Value.FocusAsync();
        }        
    }

    private async void SearchSubmit()
    {

        if (searchModel.SearchText == "") return;

        searchSubmitted = true;

        StateHasChanged();

        await GetArticles(searchModel.SearchText);

        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/utils.js");
        await module.InvokeVoidAsync("clearFocus", searchInput.Element.Value);

    }

    private async Task GetArticles(string searchtext)
    {

        currentOffset = 0;

        articles.Clear();

        (articles, currentOffset) = await dataService.GetSearch(searchtext);

        searchSubmitted = false;

        StateHasChanged();
    }

    private async Task ContinueArticles(string searchtext, int offset)
    {
        if (offset == 0) return;

        List<ArticlePageData> newArticles = new();
        int newoffset = 0;

        (newArticles, newoffset) = await dataService.GetSearch(searchtext, offset);

        articles.AddRange(newArticles);

        if (newArticles.Count < 10 || currentOffset == newoffset)
        {
            currentOffset = 0;
        } else
        {
            currentOffset = newoffset;
        }

    }

}
