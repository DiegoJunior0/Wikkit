@using Wikkit.Data;
@using Wikkit.Services;
@inject WikipediaDataService wikipediaDataService
@inject ArticleHistoryService history
@inject BookmarkService bookmarks;

<div class="articlecard @(ArticleData.viewed ? "bg-prim-sel" : "bg-prim")" @onclick=OpenLink>
    @if (ArticleData == null)
    {
        <PlaceholderContainer Animation="PlaceholderAnimation.Glow">
            <Placeholder Width="PlaceholderWidth.Col7" />
            <Placeholder Width="PlaceholderWidth.Col9" />
        </PlaceholderContainer>
    } else
    {

        <div>

            @if (LargeImage && ArticleData.images != null)
            {
                <img class="card-img-top" src="@ArticleData.images[0].url" />                    
            }

            <div class="card-title"><strong>@ArticleData.title</strong></div>

            @if(!ArticleData.isInfo & ArticleData.pageid != 0)
            {
                <div class="card-bookmark @(ArticleData.bookmarked ? "card-bookmark-active" : "")"
                @onclick=Bookmark @onclick:stopPropagation="true">
                    <span class="fore-col">_</span>
                </div>
            }            

            @if (ArticleData.thumbnail != null)
            {
                <img class="card-thumb" src="@ArticleData.thumbnail.source" />
            }
            @if (FirstParagraph != null && FirstParagraph.Length > 0)
            {
                <p style="margin: 0;">@FirstParagraph</p>
            }
        </div>         
  

    }
</div>

@code {

    [Parameter]
    public ArticlePageData ArticleData { get; set; }

    [Parameter]
    public bool LargeImage { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public bool AddToHistory { get => addToHistory; set { addToHistory = value; } }

    [Parameter]
    public EventCallback<bool> OnBookmarked { get; set; }

    private bool addToHistory = true;

    public string FirstParagraph;
    private const int minParagraphLength = 50;
    private const int maxParagraphLength = 400;

    protected override void OnInitialized()
    {
        if (ArticleData == null)
        {
            ArticleData = new();
        }

        FirstParagraph = GetFirstParagraph();

        if (Title != null)
            ArticleData.title = Title;

        if (ArticleData.isInfo)
            addToHistory = false;

        if (bookmarks.IsBookMark(ArticleData.pageid) && ArticleData.bookmarked == false)
        {
            ArticleData.bookmarked = true;
        }

    }

    private string GetFirstParagraph()
    {
        if (ArticleData == null) return "";

        if (ArticleData.extract == null || ArticleData.extract.Length == 0)
        {
            return ArticleData.description;
        }

        int safety = 0;

        string output = ArticleData.extract;

        while (output.Length > maxParagraphLength & safety < 100)
        {
            int lastPeriodIndex = output.LastIndexOf('.');
            if (lastPeriodIndex == -1)
                break;

            output = output.Substring(0, lastPeriodIndex);

            safety++;
        }

        if (output.Trim() == "")
            return ArticleData.description;

        return output;
    }

    private void OpenLink()
    {

        if (ArticleData.fullurl == null || ArticleData.fullurl.Length == 0) return;

        Uri uri = new Uri(ArticleData.fullurl);
        Browser.Default.OpenAsync(uri, BrowserLaunchMode.SystemPreferred);

        ArticleData.viewed = true;

        if (addToHistory)
        {
            history.AddToHistory(ArticleData);
        }
    }

    private async void Bookmark()
    {
        ArticleData.bookmarked = !ArticleData.bookmarked;

        if (ArticleData.bookmarked)
        {
            bookmarks.AddBookMark(ArticleData);
        } else
        {
            bookmarks.RemoveBookmark(ArticleData.pageid);
        }

        await OnBookmarked.InvokeAsync(ArticleData.bookmarked);

    }

}
