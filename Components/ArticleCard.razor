@using Wikkit.Data;
@inject WikipediaDataService wikipediaDataService

<div class="articlecard m-1 p-2 card bg-dark" @onclick=OpenLink>
    @if (ArticleData == null)
    {
        <PlaceholderContainer Animation="PlaceholderAnimation.Glow">
            <Placeholder Width="PlaceholderWidth.Col7" />
            <Placeholder Width="PlaceholderWidth.Col9" />
        </PlaceholderContainer>
    } else
    {
        <div class="articleContent row">

            <div class="articletext col-12">

                <div class="card-title text-white w-100 mb-1"><strong>@ArticleData.title</strong></div>

                @if (ArticleData.thumbnail != null)
                {
                    <img src="@ArticleData.thumbnail.source" class="card-img float-end w-25 ms-1 mb-1" />
                }
                @if (FirstParagraph != null && FirstParagraph.Length > 0)
                {
                    <p class="text-light mb-0">@FirstParagraph</p>
                }
            </div>         

        </div>     

    }
</div>

@code {
    [Parameter]
    public ArticleHeaderData HeaderData { get; set; }

    [Parameter]
    public ArticlePageData ArticleData { get; set; }

    public string FirstParagraph;
    private const int minParagraphLength = 50;
    private const int maxParagraphLength = 400;

    protected override async Task OnInitializedAsync()
    {
        if (HeaderData == null & ArticleData == null) return;

        if (ArticleData == null)
            ArticleData = await wikipediaDataService.GetArticleInfo(HeaderData.id);

        FirstParagraph = GetFirstParagraph();

    }

    private string GetFirstParagraph()
    {
        if (ArticleData == null) return "";

        if (ArticleData.extract == null || ArticleData.extract.Length == 0)
        {
            return ArticleData.description;
        }

        int safety = 0;

        string output = ArticleData.extract;

        while (output.Length > maxParagraphLength & safety < 100)
        {
            int lastPeriodIndex = output.LastIndexOf('.');
            if (lastPeriodIndex == -1)
                break;

            output = output.Substring(0, lastPeriodIndex);

            safety++;
        }

        if (output.Trim() == "")
            return ArticleData.description;

        return output;
    }

    private void OpenLink()
    {

        if (ArticleData.fullurl == null || ArticleData.fullurl.Length == 0) return;

        Uri uri = new Uri(ArticleData.fullurl);
        Browser.Default.OpenAsync(uri, BrowserLaunchMode.SystemPreferred);
    }

}
